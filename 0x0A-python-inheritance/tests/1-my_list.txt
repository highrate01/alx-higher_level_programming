=======================
how to use 1-my_list.py
=======================

This module defines a class of ''My list'' that inherit from my ''list''

istantiation
============

''MyList'' can be instantiated with no argument which will return with an empty list.

::
	>>>MyLiist = __import__('1-my_list').My_List
	>>>my_list = Mylist()
	>>> type(my_list)

::

	>>> print(my_list)
	[]
or a single argument which must be an iterable object.

::

	>>> my_list = MyList([1, 2, 3])
	>>> print(my_list)
	[1, 2, 3]

::

	>>> my_list = MyList[None]
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

A ''TypeError'' will be raised for anymore than one instatiation arguments.

::
	>>> my_list = MyList([1, 2], [3, 4])
	Traceback (most recent call last):
	TypeError: List() takes at most 1 argument (2 given)

Usage
=====

''MyList'' is an inherited ''list'' class, and thus features the same methods.
For instance, elements can be added to a ''MyList'' with the ''append()'' method.

::

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> print(my_list)
	[1, 2, 3]

Replaced with indexing:

::

	>>> my_list[0] = 5
	>>> print(my_list)
	[5, 2, 3]

And removed with the ''remove()'' method.

::

	>>> my_list.remove(5)
	>>> print(my_list)
	[2, 3]

see the documentation on python lists for more built-in methods.

''print_sorted'' method
=======================

''MyList'' implement a single method - a public instance method
''print_sorted(self)''.

::

	>>> my_list = MyList()
	>>> print(my_list.print_sorted)
	<bound method MyList.print_sorted of []>

The method takes no arguments - a TypeError will be raised if an argument is
provided.

::

	>>> my_list.print_sorted(1)
	Traceback (most recent call last):
	Typeerror: print_sorted() takes 1 positional argument but 2 were given.

The method prints the list in ascending sorted order.

::

	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]

::

	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

The order of the original list is not altered after a call to the method.

::

	>>> print(my_list)
	[1, 2, 3, 5]

Note that lists of strings are sorted lexographically,

::

	>>> my_list = MyList()
	>>> my_list.append("Myname")
	>>> my_list.append("Puppy")
	>>> my_list.append("School")
	>>> my_list.append("Alx")
	>>> my_list.append("Betty")
	>>> print(my_list)
	('Myname', 'Puppy', 'School', 'Alx', 'Betty')

::

	>>> my_list.print_sorted()
	['Alx', 'Betty', 'Myname', 'Puppy', 'School']

Another friendly reminder that the original list unaltered :)

::

	>>> print (my_list)
	['Myname', 'Puppy', 'School', 'Alx', 'Bettty']

Nothing is sorted with empty lists

::

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

if ''print_sorted(...)'' is called on a list of different types, a TypeError
will be raised.

::

	>>> my_list = MyList([I, "Betty", "Alx", 5])
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: unorderable types: str() < int()
